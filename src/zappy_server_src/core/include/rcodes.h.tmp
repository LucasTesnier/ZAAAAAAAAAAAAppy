



#ifndef RCODES_H_
    #define RCODES_H_

    #include <stdlib.h>
    #include <string.h>
    #include <stdio.h>
    #include "fd_set_manage.h"




typedef struct retcodes_s {
    
    char *repr;
    
    int code;
    
    char **params;
} retcodes_t;


static const retcodes_t retcodes[] = {
    {.repr = "200 Success\n",
    .code = 200,
    .params = NULL},
    {.repr = "201 Authentification succeed as : %s\n",
    .code = 201,
    .params = NULL},
    {.repr = "202 Logout succeed as : %s\n",
    .code = 202,
    .params = NULL},
    {.repr = "402 Authentification failed as : %s\n",
    .code = 402,
    .params = NULL},
    {.repr = "501 Command not found : %s\n",
    .code = 501,
    .params = NULL},
    {.repr = "502 Invalid format : %s\n",
    .code = 502,
    .params = NULL},
    {0, 0, 0}
};





static inline retcodes_t *create_new_repcode(int code)
{
    retcodes_t *retcode = (retcodes_t *) malloc(sizeof(retcodes_t));

    if (!retcode)
        return NULL;
    for (int i = 0; retcodes[i].repr; i++) {
        if (retcodes[i].code == code) {
            memcpy(retcode, &retcodes[i], sizeof(retcodes_t));
            return retcode;
        }
    }
    free(retcode);
    return NULL;
}





static inline _Bool print_retcode(int code, char *arg, peer_t *peer, _Bool res)
{
    retcodes_t *retcode = create_new_repcode(code);
    char *command = malloc(sizeof(char) * ((arg) ? strlen(arg) +
    strlen(retcode->repr) - 1 : strlen(retcode->repr) + 1));

    if (command == NULL)
        return res;
    if (arg)
        sprintf(command, retcode->repr, arg);
    else
        sprintf(command, retcode->repr);
    client_set_output_buffer(peer, command);
    free(command);
    free(retcode);
    return res;
}




static inline char *cretcodes(char **param)
{
    int size = 0;
    char *res = NULL;
    int total_size = 0;

    for (; param[size] != NULL; size++);
    for (int i = 0; i < size; i++)
        total_size += strlen(param[i]);
    res = malloc(sizeof(char) * (total_size + 2 * size));
    if (res == NULL)
        return NULL;
    res[0] = '\0';
    for (int i = 0; i < size - 1; i++) {
        strcat(res, param[i]);
        res[strlen(res) + 1] = '\0';
        res[strlen(res)] = ':';
    }
    strcat(res, param[size - 1]);
    return res;
}

#endif 

